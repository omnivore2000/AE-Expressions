
This is my collection of expressions for After Effects that I've put together
over a number of years. They are mostly taken from forums and I've kept the descriptions
in some places to aid in applying them.


------------------------------------------------------------
3D BEAM
------------------------------------------------------------

to
thisComp.layer("Null 2").toComp([0,0,0]);
from
thisComp.layer("Null 1").toComp([0,0,0]);

------------------------------------------------------------
BOUNCE
------------------------------------------------------------

amp = .1;
freq = 2.0;
decay = 2.0;

n = 0;
if (numKeys > 0){
n = nearestKey(time).index;
if (key(n).time > time){
n--;
}}

if (n == 0){ t = 0;
}else{
t = time - key(n).time;
}

if (n > 0){
v = velocityAtTime(key(n).time - thisComp.frameDuration/10);
value + v*amp*Math.sin(freq*t*2*Math.PI)/Math.exp(decay*t);
}else{value}

------------------------------------------------------------
CONSTANT POS BETWEEN TWO OBJECTS
------------------------------------------------------------

x1 = thisComp.layer("Point 1").transform.position[0];
y1 = thisComp.layer("Point 1").transform.position[1];
x2 = thisComp.layer("Point 2").transform.position[0];
y2 = thisComp.layer("Point 2").transform.position[1];
xResults = (x1 + x2) / 2;
yResults = (y1 + y2) / 2;
[xResults, yResults];

------------------------------------------------------------
DELAY PARENT PROPERTY
------------------------------------------------------------

- ROTATION

delay = 5; //number of frames to delay
d = delay*thisComp.frameDuration*(index - 1);
thisComp.layer(1).rotation.valueAtTime(time - d)

- POSITION

delay = 5; //number of frames to delay
d = delay*thisComp.frameDuration*(index - 1);
thisComp.layer(1).position.valueAtTime(time - d)

- FOLLOW THE NULL

The solution to this is not exactly straight forward, but it's a useful concept that's worth investing some time to understand. 
Here's how we do it. The key is that we use keyframes to animate the position of a 3D null to define a "template" for the path 
that our other layers will follow. The duration of the null's animation isn't critical - I generally use something like four seconds 
and name the null "template". You then add two sliders to the null - the first one (name it "offset") controls the separation 
between layers and the other one (name it "travel") defines the percentage of travel along the path.

You then apply this expression to as many 3D layers as you want in your "train":

strt = 0; //start time of template motion
end = 4.0; //end time of template motion

t = thisComp.layer("template");
offset = (t.effect("offset")("Slider")/100)*(index -1);
travel = linear(t.effect("travel")("Slider")/100,strt,end);
t.position.valueAtTime(travel - offset)

Adjust the offset slider to spread your layers out along the path 
and adjust the travel slider so that the last layer just moves off the start position. 
You then set a keyframe for the travel slider to set the initial position. 
It's important to note that the travel slider does not start at zero (unless you want the layers to start out all bunched up). 
You then animate the travel slider between its initial value and 100 (which will give you full travel along the path). 
This animation can include slowing down and backing up and the layers will retain their relative spacing. 
Note that the animation time of the travel slider doesn't need to be the same as the time of your original animation of the template null. 
It's all based on percentages of travel so your final animation can be any length that you like. You might want to turn off the visibility 
of the null because it can be a little distracting to see it traveling at a different speed along the same path as the layers.

------------------------------------------------------------
INDEPENDENT WIGGLE
------------------------------------------------------------

- If you want to wiggle just x and leave y alone you could do it this way:

freq = 7;
amp = 50;
w = wiggle(freq,amp); 
[w[0],value[1]]

- If you want to wiggle both x and y but with different parameters, you could do it like this:

xFreq = 7;
xAmp = 50;
yFreq = 3;
yAmp = 100;
wX = wiggle(xFreq,xAmp); 
wY = wiggle(yFreq,yAmp);
[wX[0],wY[1]] 

------------------------------------------------------------
LOOK-AT
------------------------------------------------------------

- goes on Rotation

change “pointC” to the name of the layer you want to point at
offset in degrees to correct orientation

LookAt = "pointC"
offset = 0
diffx = position[0] - this_comp.layer(LookAt).position[0];
diffy = position[1] - this_comp.layer(LookAt).position[1];
if (diffx == 0) {
diffx = 1 }
sign = 1 + (-1 * (diffx / Math.abs(diffx))) * 90;
radians_to_degrees(Math.atan(diffy/diffx)) + sign + offset

- same, but converted to screen co-ord

pointALayer = thisLayer;
pointA = pointALayer.toComp(pointALayer.anchorPoint);

//change “pointC” to the name of the layer you want to point at
pointBLayer = thisComp.layer("pointC");
pointB = pointBLayer.toComp(pointBLayer.anchorPoint);

a = pointA[0] - pointB[0];
b = pointA[1] - pointB[1];
switcher = 0;
if (b < 0) {switcher = -180};
if (b == 0) {degree = 90} else {degree = -radiansToDegrees(Math.atan(a/b))}

degree + value + switcher
//add or subtract number at end for offset

------------------------------------------------------------
LOOP A MASK OR SHAPE KEYFRAME
------------------------------------------------------------

- PING PONG

if (numKeys >1 && time > key(numKeys).time){
  t1 = key(1).time;
  t2 = key(numKeys).time;
  span = t2 - t1;
  delta = time - t2;
  seg = Math.floor(delta/span);
  t = delta%span;
  valueAtTime((seg%2) ? (t1 + t) : (t2 - t));
}else
  value

- LOOP

if (numKeys >1 && time > key(numKeys).time){
  t1 = key(1).time;
  t2 = key(numKeys).time;
  span = t2 - t1;
  delta = time - t2;
  t = delta%span;
  valueAtTime(t1 + t)
}else
  value
  
------------------------------------------------------------
OSCILLATIONS
------------------------------------------------------------

- SCALE (easy)

freq = time*3;
amp = 20;

x = value[0];
y = value[1]+Math.sin(freq)*amp;
[x,y];



-POSITION (with decay?)

freq = 1.0; //oscillations per second 
amplitude =  90; 
decay =  0;

posCos = Math.abs(Math.cos(freq*time*2*Math.PI));
y = amplitude*posCos/Math.exp(decay*time);
position - [0,y]


- ROTATION

freq = 1;
amp = 80;
amp*Math.sin(freq*time*2*Math.PI);

for position (which needs 2 properties)
freq = 1;
amp = 20;
s = amp*Math.sin(freq*time*8+1.8*Math.PI);   
[0,s];			
//to offset time along x 		     
//can pick whip objects own pos

example
freq = thisComp.layer("dotsOsci controller").effect("freq")("Slider");
amp = thisComp.layer("dotsOsci controller").effect("Amp")("Slider");
s = amp*Math.sin(freq*time*8+0.1*Math.PI);
[content("Ellipse Path 1").position[0],s];

------------------------------------------------------------
RANDOM SCALE OF SINGLE AXIS
------------------------------------------------------------

frame = Math.round(time/thisComp.frameDuration);
seed = Math.floor(frame/3);
seedRandom(seed,true);
s = random(50,150);
[value[0],s] 

------------------------------------------------------------
RANDOM TEXT
------------------------------------------------------------

. applied to character offset in Animator 1
seedRandom(1, false);
random(200);

make 'true' locks to time

------------------------------------------------------------
SAMPLEIMAGE; SCALE TO GRADIENT
------------------------------------------------------------

sampleSize = [10,10];
target = thisComp.layer("DRIVER");
samplePos = target.fromComp(toComp(anchorPoint));
rgb = target.sampleImage(samplePos, sampleSize, true, time);
hsl = rgbToHsl(rgb);
[hsl[2]*100,hsl[2]*100]

//will work with a gradient effect on a solid (no precomp)

------------------------------------------------------------
SPRINGY FOLLOW
------------------------------------------------------------

rapidity=6; //following speed
inertia=0.4; //how dull the following will be (0-1)
leader=thisComp.layer("leader")

pos1=leader.position;
pos2=leader.position;
v=0; i=0;
while (i<=time)
 {
  pos1=leader.position.valueAtTime(i);
  delta=sub(pos1,pos2);
  a=delta*rapidity*thisComp.frameDuration;
  v=(v+a)*(1-inertia);
  pos2 += v;
  i += thisComp.frameDuration;
 }
pos2

------------------------------------------------------------
TEXT WITH SLIDER CONTROL
------------------------------------------------------------

add slider control from expressions effects menu
pick whip source text to slider control and add this code

- limit to whole numbers only:

Math.round(effect("Slider Control")("Slider")) + "%"

- limit to decimal 2 places:

val = effect("Slider Control")("Slider");
places = 1;
factor = Math.pow(10, places)
Math.round(val*factor)/factor

- limit to decimal 2 decimal places and force zeroes:

places = 3; //number of decimal places desired
val = effect("Slider Control")("Slider"); //sub in the name of your slider here
//
factor = Math.pow(0.1, places) ;
sign = "";
if (val < 0) sign = "-";
//
val = Math.abs(val);
whole = Math.floor(val);
fraction = "" + Math.round((val - whole)/factor)*factor;
//
for (fraction; fraction.length < places+2; fraction+="0");
//
sign + whole + "." + fraction.substring(2, places+2)

- add spaces (or indeed, commas) to spaces between numbers: thus 1 000 000

val = effect("textNum")("Slider");
function addCommas(x) {
	return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}
addCommas(val)


- better version, add commas and also limit to x places

places = 0; //number of decimal places desired
val = effect("textNum")("Slider");

function addCommas(x) {
	return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

factor = Math.pow(0.1, places);

val = Math.abs(val);
whole = Math.floor(val);
fraction = "" + Math.round((val - whole)/factor)*factor;

//for (fraction; fraction.length < places+2; fraction+="0");
for (fraction; fraction.length < places; fraction+=" ");

addCommas(whole + "" + fraction.substring(2, places+2))



------------------------------------------------------------
TIME OFFSET NESTED COMP
------------------------------------------------------------

for a nested comp (page 02) that is time offset in the parent comp (here called Animation test) and parented to a slider, 
keyframes won’t respond without the correct time being applied.

C = comp(“parent comp”).layer(“this comp name in parent“);
C.effect(“slider name“)(“Slider").valueAtTime(time+C.startTime)

------------------------------------------------------------
TIME REMAP TO SLIDER
------------------------------------------------------------

. null named FaceControl
. Slider named Mouth
. time remap desired layer, place this expression on time remap

sliderPos = thisComp.layer(“control layer“).effect(“slider name“)(“Slider"); 
framesToTime((Math.round(sliderPos)))

------------------------------------------------------------
FOLLOW PARENT WITH DELAY
------------------------------------------------------------

. from Dan Ebberts obviously

delay = .5;
try{
parent.fromWorld(toWorld(anchorPoint,time-delay));
}catch(err){
value;
}

------------------------------------------------------------
SINE WAVE ON SHAPE LAYER
------------------------------------------------------------

. create shape layer (use oroboros to create a simple line)
. create applicable sliders on the shape layer
. apply to "path"

S=effect("Speed")("Slider");
A=effect("Amp")("Slider");
F=effect("Freq")("Slider")/3.6;
R=effect("Resolution")("Slider");
W=effect("Width")("Slider")

P=[];

for (i=0;i<R;i++){
P.push([W/R*i,Math.sin(time*S+i/(R/F))*A]);}


createPath(P,[],[], false)


------------------------------------------------------------
SINE WAVE ON TEXT LAYER
------------------------------------------------------------

on text / Animate / position
. add an Expression selector
. apply to Amount:
Math.sin(time*5+textIndex)*100
Math.sin(time*5+textIndex/4)*100 (control sine wave length)


------------------------------------------------------------
BLINKING CURSOR WITH ADDED INPOINT TIME 
------------------------------------------------------------

L = masterProperty("Source Text").length;
PT = time - thisLayer.inPoint;
T = PT*10;
F = Math.round(time % 1);

Fl = "";
if (F==1 | T>0) Fl = "|";
if (T>=L) Fl = "";
if (T>0) substr(0,T) + Fl
else Fl


------------------------------------------------------------
CYCLE THROUGH FONT WEIGHTS
------------------------------------------------------------

weights = [
'Thin',
'Light',
'Regular',
'Bold',
'Heavy'
];
family = thisProperty.style.font;
family = family.split('-');
select = Math.floor(clamp(effect("Select")("Slider"), 0, weights.length - 1));;
createStyle().setFont(family[0] + '-' + weights[select]);


------------------------------------------------------------
ALIGN TO PATH
------------------------------------------------------------

myPath = thisComp.layer("path").mask("Mask 1").maskPath;
animation = effect("travel")("Slider")/100;
myPath.pointOnPath(animation);

